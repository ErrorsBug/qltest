{"version":3,"file":"2.chunk.js","sources":["webpack:///./wechat-react/components/dialog/bottom-dialog.js","webpack:///./wechat-react/components/dialog/confirm.js","webpack:///./wechat-react/components/dialog/index.js","webpack:///./wechat-react/components/dialog/is-buy-dialog.js","webpack:///./wechat-react/components/dialog/list-dialog.js","webpack:///./wechat-react/components/dialog/middle-dialog.js","webpack:///./wechat-react/components/switch/index.js"],"sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\nimport Switch from '../switch';\r\n\r\nconst dangerHtml = content => {\r\n    return { __html: content }\r\n};\r\n\r\nBottomDialog.propTypes = {\r\n    // 是否显示组件\r\n    show: PropTypes.bool.isRequired,\r\n\r\n    // 是否点击背景关闭弹框\r\n    bghide: PropTypes.bool,\r\n\r\n    // 标题\r\n    title: PropTypes.string,\r\n\r\n    // 标题的标签\r\n    titleLabel: PropTypes.string,\r\n\r\n    className: PropTypes.string,\r\n\r\n    // 弹框内容类型\r\n    // list: 弹出一个类似action sheet的列表\r\n    // empty: 一个空弹框，自由发挥\r\n    theme: PropTypes.oneOf(['list', 'empty', 'scroll']),\r\n\r\n    // 项目列表\r\n    items: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            // 列表项的键，用于识别点击事件\r\n            key: PropTypes.oneOfType([\r\n                PropTypes.string,\r\n                PropTypes.number,\r\n            ]).isRequired,\r\n\r\n            // 图标，请用本项目自带的字体图标库中的图标，这里是传递一个class name而已\r\n            icon: PropTypes.string,\r\n\r\n            // 内容，本内容将以html形式插入item内容位置，意味着你可以自定义item里面的内容，包括样式，别乱来\r\n            content: PropTypes.string,\r\n\r\n            // 是否显示\r\n            show: PropTypes.bool,\r\n\r\n            // switch的状态，不传就不显示switch\r\n            switchStatus: PropTypes.bool,\r\n\r\n            // 主题样式\r\n            // normal: 黑色的字体\r\n            // danger: 红色的样式\r\n            theme: PropTypes.oneOf(['normal', 'danger'])\r\n        })\r\n    ),\r\n\r\n    // 是否显示关闭按钮,这个关闭按钮是底部的那个取消按钮\r\n    close: PropTypes.bool,\r\n    // 是否不显示埋点 false 要有埋点 true不用埋点\r\n    notShowPoint: PropTypes.bool,\r\n\r\n    // 关闭按钮内容\r\n    closeText: PropTypes.string,\r\n\r\n    // 关闭弹框事件(点击背景的时候，并且设置bghide=true时触发)\r\n    onClose: PropTypes.func,\r\n\r\n    // 列表项点击事件,\r\n    onItemClick: PropTypes.func,\r\n    // 表示是否选中\r\n    activeString: PropTypes.string, \r\n    // 是否展示确定按钮\r\n    showSure: PropTypes.bool,\r\n};\r\n\r\n/**\r\n * 底部弹框组件\r\n */\r\nfunction BottomDialog (props) {\r\n    const {\r\n        show,\r\n        bghide = true,\r\n        title,\r\n        titleLabel,\r\n        className,\r\n        theme,\r\n        items,\r\n        onClose,\r\n        close = false,\r\n        onItemClick,\r\n        children,\r\n        notShowPoint\r\n    } = props;\r\n\r\n    if (!show) {\r\n        return null;\r\n    }\r\n\r\n    let contentNode\r\n    if (theme === 'list') {\r\n        contentNode = genList(props)\r\n    } else if (theme === 'empty') {\r\n        contentNode = children\r\n    } else if (theme === 'scroll') {\r\n        contentNode = genScrollList(props)\r\n    }\r\n\r\n    return (\r\n        <div className={`co-dialog-container ${className}`}>\r\n            <div className='co-dialog-bg' onClick={ () => bghide && onClose && onClose() }></div>\r\n\r\n            <div className='co-dialog-bottom'>\r\n\r\n                { contentNode }\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n/**\r\n * 生成列表样式的action sheet\r\n */\r\nfunction genList ({ title, titleLabel, items, close, onItemClick, ...props }) {\r\n    return (\r\n        <ul className='co-dialog-bottom-list'>\r\n            {\r\n                (title || titleLabel) && (\r\n                    <li className='co-dialog-bottom-title'>\r\n                        {titleLabel ? (<span className='co-dialog-bottom-title-label'>{ titleLabel }</span>): null }\r\n                        <span className='co-dialog-bottom-title-content' dangerouslySetInnerHTML={ dangerHtml(title) } ></span>\r\n                        {props.showSure ? \r\n                            (<span className=\"dialog-sure on-log\" \r\n                                data-log-region={props.logSure && props.logSure.region}\r\n                                data-log-pos={props.logSure && props.logSure.pos}\r\n                            onClick={props.onSure}>{props.sure || '确定'}</span>)\r\n                            : null\r\n                        }\r\n                    </li>\r\n                )\r\n            }\r\n\r\n            {\r\n                items.map((item, index) => {\r\n                    if (item.show === true) {\r\n                        if (item.switchStatus === true || item.switchStatus === false) {\r\n                            return (\r\n                                <li key={`co-dialog-bottom-item${index}`}\r\n                                    hidden={!item.show}\r\n                                    className={ classnames('co-dialog-bottom-item', item.icon, item.theme) }\r\n                                     >\r\n                                    {item.content}\r\n                                    <Switch\r\n                                        className='co-dialog-bottom-item-switch'\r\n                                        active={item.switchStatus}\r\n                                        onChange={() => {onItemClick && onItemClick(item.key, item.switchStatus)}}\r\n                                    />\r\n                                </li>\r\n                            )\r\n                        } else {\r\n                            return (\r\n                                <li key={`co-dialog-bottom-item${index}`}\r\n                                    hidden={!item.show}\r\n                                    className={ \r\n                                        classnames(\r\n                                            'co-dialog-bottom-item', \r\n                                            item.icon, \r\n                                            item.theme, \r\n                                            item.topictype, \r\n                                            item.region && !props.notShowPoint ? 'on-log on-visible' : '', \r\n                                            props.activeString == item.key ? 'co-dialog-bottom-item-active' : ''\r\n                                        ) \r\n                                    }\r\n                                    data-log-region={item.region}\r\n                                    data-log-pos={item.pos}\r\n                                    onClick={ () => onItemClick && onItemClick(item.key, \"\",item.topictype) }\r\n                                    type={item.topicType}\r\n                                    dangerouslySetInnerHTML={ dangerHtml(item.content) } >\r\n                                </li>\r\n                            )\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n\r\n            { close && genClose({ ...props }) }\r\n        </ul>\r\n    )\r\n}\r\n\r\n/**\r\n * 生成可以滚动的列表样式的action sheet\r\n */\r\nfunction genScrollList ({ title, titleLabel, items, close, onItemClick, scrollHeight = 400,  ...props }) {\r\n    return (\r\n        <ul className='co-dialog-bottom-list'>\r\n            {\r\n                (title || titleLabel) && (\r\n                    <li className='co-dialog-bottom-title'>\r\n                        {titleLabel ? (<span className='co-dialog-bottom-title-label'>{ titleLabel }</span>): null }\r\n                        <span className='co-dialog-bottom-title-content' dangerouslySetInnerHTML={ dangerHtml(title) } ></span>\r\n                    </li>\r\n                )\r\n            }\r\n            <div className=\"scroll-warp\" style={{\"height\": scrollHeight}}>\r\n                {\r\n                    items.map((item, index) => {\r\n                        if (item.show === true) {\r\n                            if (item.switchStatus === true || item.switchStatus === false) {\r\n                                return (\r\n                                    <li key={`co-dialog-bottom-item${index}`}\r\n                                        hidden={!item.show}\r\n                                        className={classnames('co-dialog-bottom-item', item.icon, item.theme)} >\r\n                                        {item.content}\r\n                                        <Switch\r\n                                            className='co-dialog-bottom-item-switch'\r\n                                            active={item.switchStatus}\r\n                                            onChange={() => { onItemClick && onItemClick(item.key, item.switchStatus) }}\r\n                                        />\r\n                                    </li>\r\n                                )\r\n                            } else {\r\n                                return (\r\n                                    <li key={`co-dialog-bottom-item${index}`}\r\n                                        hidden={!item.show}\r\n                                        className={classnames('co-dialog-bottom-item', item.icon, item.theme, item.topictype)}\r\n                                        onClick={() => onItemClick && onItemClick(item.key, \"\", item.topictype)}\r\n                                        type={item.topicType}\r\n                                        dangerouslySetInnerHTML={dangerHtml(item.content)} >\r\n                                    </li>\r\n                                )\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n\r\n\r\n            { close && genClose({ ...props }) }\r\n        </ul>\r\n    )\r\n}\r\n\r\n/**\r\n * 底部取消按钮\r\n */\r\nfunction genClose ({ closeText, onClose, onDelete }) {\r\n    return (\r\n        <li className='co-dialog-bottom-close' onClick={ () => {onDelete ? onDelete() : onClose()} } >\r\n            { closeText || '取消' }\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default BottomDialog;\r\n","import React, {PureComponent} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport MiddleDialog from './middle-dialog';\r\nimport { autobind } from 'core-decorators';\r\n\r\n/**\r\n * 确认框，按钮可配置，状态自管理\r\n */\r\n@autobind\r\nclass Confirm extends PureComponent {\r\n\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            show: false,\r\n        };\r\n    }\r\n\r\n    show() {\r\n        this.setState({\r\n            show: true,\r\n        });\r\n    }\r\n\r\n    hide() {\r\n        this.setState({\r\n            show: false,\r\n        });\r\n    }\r\n\r\n    onClose(e) {\r\n        this.props.onClose && this.props.onClose(e);\r\n        this.hide();\r\n    }\r\n\r\n    onBtnClick(tag) {\r\n        if (tag === 'cancel') {\r\n            this.props.onClose && this.props.onClose();\r\n            this.hide();\r\n        }\r\n        this.props.onBtnClick && this.props.onBtnClick(tag);\r\n    }\r\n\r\n    render () {\r\n        const {\r\n            buttons = 'cancel-confirm',\r\n            title,\r\n            children,\r\n            buttonTheme = 'line',\r\n            titleTheme = 'white',\r\n            className,\r\n            cancelText = this.props.cancelText || \"取消\",\r\n            confirmText = this.props.confirmText || \"确定\",\r\n            close = false,\r\n            bghide=true,\r\n            confirmDisabled,\r\n        } = this.props;\r\n\r\n        const {\r\n            show,\r\n        } = this.state;\r\n\r\n        return (\r\n            <MiddleDialog\r\n                title = { title }\r\n                titleTheme = { titleTheme }\r\n                show = { show }\r\n                theme = 'empty'\r\n                close = { close }\r\n                onClose = { this.onClose }\r\n                buttons = { buttons }\r\n                cancelText = { cancelText }\r\n                confirmText = { confirmText }\r\n                buttonTheme = { buttonTheme }\r\n                onBtnClick = { this.onBtnClick}\r\n                className={className}\r\n                bghide={bghide}\r\n                confirmDisabled={confirmDisabled}\r\n            >\r\n                <div className = 'co-dialog-confirm'>\r\n                    { children }\r\n                </div>\r\n            </MiddleDialog>\r\n        );\r\n    }\r\n}\r\n\r\nConfirm.propTypes = {\r\n    // 标题\r\n    title: PropTypes.string,\r\n    // buttons\r\n    // cancel: 取消按钮\r\n    // confirm: 确认按钮\r\n    // cancel-confirm: 左取消右确认按钮 (默认)\r\n    //confirm-cancel:右取消左确认确认按钮\r\n    buttons: PropTypes.oneOf(['cancel', 'confirm', 'cancel-confirm','confirm-cancel', 'none', '']),\r\n    // 按钮点击事件\r\n    // 回调参数: (tag: ['cancel' | 'confirm']) => null\r\n    onBtnClick: PropTypes.func,\r\n    // 按钮样式\r\n    buttonTheme: PropTypes.oneOf(['line', 'block']),\r\n    // 确认按钮文案\r\n    confirmText: PropTypes.string,\r\n    // 取消按钮文案\r\n    cancelText: PropTypes.string,\r\n    // 标题的样式\r\n    // white: 白色的头部\r\n    // blue: 蓝色的头部\r\n    titleTheme: PropTypes.oneOf(['white', 'blue', 'red']),\r\n    // 自定义样式\r\n    className: PropTypes.string,\r\n};\r\n\r\nexport default Confirm;\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport MiddleDialog from './middle-dialog'\r\nexport BottomDialog from './bottom-dialog' \r\nexport Confirm from './confirm'\r\nexport ListDialog from './list-dialog'\r\nexport IsBuyDialog from './is-buy-dialog'","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { autobind } from 'core-decorators';\r\n\r\n/**\r\n * 未购买弹窗\r\n */\r\n@autobind\r\nclass IsBuyDialog extends Component {\r\n\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            show: false,\r\n        };\r\n    }\r\n\r\n    show() {\r\n        this.setState({\r\n            show: true,\r\n        });\r\n    }\r\n\r\n    hide() {\r\n        this.setState({\r\n            show: false,\r\n        });\r\n    }\r\n\r\n    confirm () {\r\n        this.props.onBtnClick({\r\n            type: 'cancel'\r\n        })\r\n        this.hide()\r\n    }\r\n\r\n    cancel () {\r\n        this.props.onBtnClick({\r\n            type: 'cancel'\r\n        })\r\n        this.hide()\r\n    }\r\n\r\n    render () {\r\n        const {\r\n            title,\r\n            desc,\r\n            cancelText = this.props.cancelText || \"取消\",\r\n            confirmText = this.props.confirmText || \"确定\",\r\n            money\r\n        } = this.props;\r\n\r\n        const {\r\n            show,\r\n        } = this.state;\r\n\r\n        return show && (\r\n            <div className=\"is-buy-dialog co-dialog-container\">\r\n                <div className=\"co-dialog-bg\">\r\n                    <div className=\"co-dialog-content\">\r\n                        <p className=\"title\">{title}</p>\r\n                        <p className=\"desc\">{desc}</p>\r\n\r\n                        <div className=\"btn-group\">\r\n                            <div className=\"btn confirm\" onClick={() => {this.confirm()}}>\r\n                                <span>{confirmText}</span>\r\n                                {/* {\r\n                                    money && (\r\n                                        <span className=\"money\">{money}</span>\r\n                                    )\r\n                                } */}\r\n                            </div>\r\n                            {/* <div className=\"btn cancel\" onClick={() => {this.cancel()}}>\r\n                                <span>{cancelText}</span>\r\n                            </div> */}\r\n                        </div>\r\n\r\n                        <span className=\"co-dialog-close normal-style\" onClick={() => {this.hide()}}>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nIsBuyDialog.propTypes = {\r\n    // 标题\r\n    title: PropTypes.string,\r\n    // 描述\r\n    desc: PropTypes.string,\r\n    // 按钮点击事件\r\n    // 回调参数: (tag: ['cancel' | 'confirm']) => null\r\n    onBtnClick: PropTypes.func,\r\n    // 确认按钮文案\r\n    confirmText: PropTypes.string,\r\n    // 取消按钮文案\r\n    cancelText: PropTypes.string,\r\n    // 价格\r\n    money: PropTypes.number\r\n};\r\n\r\nexport default IsBuyDialog;\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Confirm from './confirm';\r\nimport ScrollToLoad from '../scrollToLoad';\r\n\r\nclass ListDialog extends Component {\r\n\r\n\r\n    dangerHtml = content => {\r\n        return { __html: content }\r\n    }\r\n\r\n    state = {\r\n        list: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            list: this.props.items\r\n        });\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({\r\n            list: nextProps.items\r\n        });\r\n    }\r\n\r\n    show() {\r\n        this.refs.dialog.show();\r\n    }\r\n\r\n    hide() {\r\n        this.refs.dialog.hide();\r\n    }\r\n\r\n    /**\r\n     * 获取选中的项目\r\n     */\r\n    getSelectedItem() {\r\n        return this.state.list.filter(item => item.checked)[0]\r\n    }\r\n\r\n    onSelectItem(index) {\r\n        this.setState({\r\n            list: this.state.list.map((item, i) => {\r\n                if (i === index) {\r\n                    item.checked = true;\r\n                } else {\r\n                    item.checked = false;\r\n                }\r\n\r\n                return item;\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let {\r\n            title,\r\n            buttons,\r\n            className,\r\n\r\n            onBtnClick,\r\n            noMore,\r\n            loadNext,\r\n        } = this.props;\r\n\r\n        if (loadNext == null) {\r\n            loadNext = () => {};\r\n            noMore = true;\r\n        }\r\n\r\n        return (\r\n            <Confirm\r\n                ref='dialog'\r\n                title={ title }\r\n                buttons={ buttons }\r\n                className={ className + ' co-list-dialog' }\r\n                onBtnClick={ (key) => onBtnClick(key, this.getSelectedItem()) }\r\n            >\r\n                <div className='co-list-container'>\r\n                    <ScrollToLoad\r\n                        className='co-list-wrap'\r\n                        loadNext={ loadNext }\r\n                        noMore={ noMore }\r\n                        >\r\n                        {\r\n                            this.state.list.map((item, index) => (\r\n                                <li \r\n                                    key={ `co-list-item-${item.key}` }\r\n                                    className={`co-list-dialog-item ${item.checked ? 'icon_checked' : ''}` }\r\n                                    onClick={ () => this.onSelectItem(index) }\r\n                                    dangerouslySetInnerHTML={ this.dangerHtml(item.content) }></li>\r\n                            ))\r\n                        }\r\n                    </ScrollToLoad>\r\n                </div>\r\n            </Confirm>\r\n        );\r\n    }\r\n}\r\n\r\nListDialog.propTypes = {\r\n    items: PropTypes.arrayOf(PropTypes.shape({\r\n        // 选中的回调值\r\n        key: PropTypes.any,\r\n        // 内容，可以是一个html字符串，将原封不动的放进item中\r\n        content: PropTypes.string,\r\n        // 是否选中\r\n        checked: PropTypes.bool,\r\n    })).isRequired,\r\n\r\n    // 列表内部滚动加载的回调方法\r\n    loadNext: PropTypes.func,\r\n    // 没有更多了\r\n    noMore: PropTypes.bool,\r\n};\r\n\r\nListDialog.defaultProps = {\r\n    loadNext: null\r\n}\r\n\r\nexport default ListDialog;","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\nMiddleDialog.propTypes = {\r\n    // 是否显示弹框\r\n    show: PropTypes.bool.isRequired,\r\n\r\n    // 设置是否点击背景关闭弹框\r\n    bghide: PropTypes.bool,\r\n\r\n    // theme\r\n    // empty: 一个空白弹框，啥都没有\r\n    // primary: 一个蓝色背景的头部\r\n    theme: PropTypes.oneOf(['empty', 'primary']),\r\n\r\n    // 标题\r\n    title: PropTypes.string,\r\n\r\n    // 标题的样式\r\n    // white: 白色的头部\r\n    // blue: 蓝色的头部\r\n    titleTheme: PropTypes.oneOf(['white', 'blue']),\r\n\r\n    // buttons\r\n    // none(default): 隐藏按钮栏\r\n    // cancel: 取消按钮\r\n    // confirm: 确认按钮\r\n    // cancel-confirm: 左取消右确认按钮\r\n    // confirm-cancel: 右取消左确认按钮\r\n    buttons: PropTypes.oneOf(['none', 'cancel', 'confirm', 'cancel-confirm','confirm-cancel']),\r\n\r\n    // 取消按钮文案\r\n    cancelText: PropTypes.string,\r\n\r\n    // 确认按钮文案\r\n    confirmText: PropTypes.string,\r\n\r\n    // buttonTheme\r\n    // line: 线条隔开形式的按钮\r\n    // block: 方块形式的按钮\r\n    buttonTheme: PropTypes.oneOf(['line', 'block']),\r\n\r\n    // 按钮点击事件\r\n    // 回调参数: (tag: string) => null\r\n    onBtnClick: PropTypes.func,\r\n\r\n    // 是否显示关闭按钮\r\n    close: PropTypes.bool,\r\n\r\n    // 关闭事件(关闭按钮触发或者点击背景触发)\r\n    onClose: PropTypes.func,\r\n\r\n    closeStyle:PropTypes.string,\r\n\r\n    className: PropTypes.string,\r\n\r\n    contentClassName: PropTypes.string,\r\n\r\n    confirmDisabled: PropTypes.bool, // confirm按钮是否无效\r\n\r\n    // 关闭按钮埋点\r\n    trackCloseBtnModel: PropTypes.objectOf(PropTypes.string),\r\n};\r\n\r\nMiddleDialog.defaultProps = {\r\n    onClose: () => {},\r\n};\r\n\r\n/**\r\n * 中间弹框组件\r\n */\r\nfunction MiddleDialog ({\r\n    show,\r\n    theme,\r\n    titleTheme = 'white',\r\n    buttons,\r\n    buttonTheme,\r\n    close,\r\n    closeStyle=\"normal-style\",\r\n    closeProps,\r\n    onClose,\r\n    children,\r\n    title,\r\n    onBtnClick,\r\n    className,\r\n    contentClassName,\r\n    cancelText = \"取消\",\r\n    confirmText = \"确定\",\r\n    bghide = true,\r\n    confirmDisabled = false,\r\n    trackCloseBtnModel = {},\r\n}) {\r\n    if (!show) {\r\n        return null\r\n    }\r\n\r\n    let titleNode\r\n    if (title) {\r\n        titleNode = genTitle(title, titleTheme);\r\n    }\r\n\r\n    let buttonNode\r\n    if (buttonTheme === 'line') {\r\n        buttonNode = genLineButton(buttons,cancelText,confirmText, onBtnClick, confirmDisabled)\r\n    } else if (buttonTheme === 'block') {\r\n        buttonNode = genBlockButton(buttons,cancelText,confirmText, onBtnClick)\r\n    }\r\n\r\n    let closeNode\r\n    if (close) {\r\n        closeNode = genClose(onClose, closeStyle, closeProps, trackCloseBtnModel)\r\n    }\r\n\r\n    return (\r\n        <div className={'co-dialog-container ' + className}>\r\n            <div className='co-dialog-bg' onClick={ (e) => { e.nativeEvent.stopImmediatePropagation(); bghide && onClose(e); } } ></div>\r\n\r\n            <div className='co-dialog-content'>\r\n                { closeNode }\r\n\r\n                { titleNode }\r\n\r\n                <main className={ contentClassName }>\r\n                    { children }\r\n                </main>\r\n\r\n                { buttonNode }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MiddleDialog;\r\n\r\nconst dangerHtml = content => {\r\n    return { __html: content }\r\n};\r\n\r\n/**\r\n * 生成头部标题\r\n */\r\nfunction genTitle (title, titleTheme) {\r\n    return (\r\n        <div className={ classnames('co-dialog-title', titleTheme) } dangerouslySetInnerHTML={ dangerHtml(title) }></div>\r\n    )\r\n}\r\n\r\n/**\r\n * 生成线条隔开的按钮\r\n */\r\nfunction genLineButton (buttons,cancelText,confirmText, onClick, confirmDisabled) {\r\n    if (buttons === 'none') {\r\n        return ''\r\n    } else if (buttons === 'cancel') {\r\n        return (\r\n            <div className='co-dialog-btn-line'>\r\n                <span className='co-dialog-btn-line-cancel'\r\n                      onClick={ (e) => {e.nativeEvent.stopImmediatePropagation(); onClick('cancel');  } }>\r\n                    { cancelText }\r\n                </span>\r\n            </div>\r\n        )\r\n    } else if (buttons === 'confirm') {\r\n        return (\r\n            <div className='co-dialog-btn-line'>\r\n                <span className='co-dialog-btn-line-confirm'\r\n                      onClick={ () => onClick('confirm') }>\r\n                    { confirmText }\r\n                </span>\r\n            </div>\r\n        )\r\n    } else if (buttons === 'cancel-confirm') {\r\n        return (\r\n            <div className='co-dialog-btn-line'>\r\n                <span className='co-dialog-btn-line-cancel'\r\n                      onClick={ (e) => {e.nativeEvent.stopImmediatePropagation(); onClick('cancel');  } }>\r\n                    { cancelText }\r\n                </span>\r\n\r\n                {\r\n                    confirmDisabled ?\r\n                    <span className='co-dialog-btn-line-confirm disabled'>\r\n                        { confirmText }\r\n                    </span> :\r\n                    <span className='co-dialog-btn-line-confirm'\r\n                        onClick={ () => onClick('confirm') }>\r\n                        { confirmText }\r\n                    </span>\r\n                }\r\n            </div>\r\n        )\r\n    } else if (buttons === 'confirm-cancel') {\r\n        return (\r\n            <div className='co-dialog-btn-line'>\r\n                <span className='co-dialog-btn-line-confirm'\r\n                      onClick={ () => onClick('confirm') }>\r\n                    { confirmText }\r\n                </span>\r\n                <span className='co-dialog-btn-line-cancel'\r\n                      onClick={ (e) => {e.nativeEvent.stopImmediatePropagation(); onClick('cancel');  } }>\r\n                    { cancelText }\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * 生成方块状的按钮\r\n */\r\nfunction genBlockButton (buttons,cancelText,confirmText, onClick) {\r\n    if (buttons === 'none') {\r\n        return ''\r\n    } else if (buttons === 'cancel') {\r\n        return (\r\n            <div className='co-dialog-btn-block'>\r\n                <div className='co-dialog-btn-block-wrap'>\r\n                    <span className='co-dialog-btn-block-cancel'\r\n                        onClick={ (e) => {e.nativeEvent.stopImmediatePropagation(); onClick('cancel');  } }>\r\n                        { cancelText }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (buttons === 'confirm') {\r\n        return (\r\n            <div className='co-dialog-btn-block'>\r\n                <div className='co-dialog-btn-block-wrap'>\r\n                    <span className='co-dialog-btn-block-confirm'\r\n                        onClick={ () => onClick('confirm') }>\r\n                        { confirmText }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (buttons === 'cancel-confirm') {\r\n        return (\r\n            <div className='co-dialog-btn-block'>\r\n                <div className='co-dialog-btn-block-wrap'>\r\n                    <span className='co-dialog-btn-block-cancel'\r\n                        onClick={ (e) => {e.nativeEvent.stopImmediatePropagation(); onClick('cancel');  } }>\r\n                        { cancelText }\r\n                    </span>\r\n                </div>\r\n\r\n                <div className='co-dialog-btn-block-wrap'>\r\n                    <span className='co-dialog-btn-block-confirm'\r\n                        onClick={ () => onClick('confirm') }>\r\n                        { confirmText }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (buttons === 'confirm-cancel') {\r\n        return (\r\n            <div className='co-dialog-btn-block'>\r\n                <div className='co-dialog-btn-block-wrap'>\r\n                    <span className='co-dialog-btn-block-confirm'\r\n                        onClick={ () => onClick('confirm') }>\r\n                        { confirmText }\r\n                    </span>\r\n                </div>\r\n                <div className='co-dialog-btn-block-wrap'>\r\n                    <span className='co-dialog-btn-block-cancel'\r\n                        onClick={ (e) => {e.nativeEvent.stopImmediatePropagation(); onClick('cancel');  } }>\r\n                        { cancelText }\r\n                    </span>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * 生成关闭按钮\r\n */\r\nfunction genClose (onClose, closeStyle, closeProps, trackCloseBtnModel) {\r\n    return (\r\n        <div \r\n            className={`co-dialog-close ${closeStyle}`} \r\n            data-log-name={trackCloseBtnModel.name}\r\n            data-log-region={trackCloseBtnModel.region}\r\n            data-log-pos={trackCloseBtnModel.pos}\r\n            onClick={ (e) => onClose(e) } \r\n            {...closeProps}\r\n        ></div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames'\r\n\r\n// Switch 组件\r\nconst Switch = ({\r\n    active,\r\n    size='lg',\r\n    preChange,\r\n    onChange,\r\n    className,\r\n    dataLog\r\n}) => {\r\n    return (\r\n        <div\r\n            className={ classnames('co-switch', className, size, { 'active': active }) }\r\n            data-log-region={dataLog && dataLog.region}\r\n            data-log-pos={dataLog && dataLog.pos}\r\n            onClick={ onChange } >\r\n        </div>\r\n    );\r\n};\r\n\r\nSwitch.propTypes = {\r\n    // Switch是开关状态\r\n    active: PropTypes.bool.isRequired,\r\n\r\n    // switch的大小\r\n    size: PropTypes.oneOf(['lg', 'md', 'sm']),\r\n\r\n    // 改变状态时调用\r\n    onChange: PropTypes.func,\r\n\r\n    // 自定义样式\r\n    className: PropTypes.string,\r\n};\r\n\r\nexport default Switch;"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAtBA;AA0BA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAhEA;AAmEA;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAOA;AAEA;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAYA;AACA;AACA;AACA;AACA;AACA;AAFA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAhBA;AAmBA;AACA;AACA;AAMA;AAEA;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAQA;AACA;AACA;AAQA;AAEA;;;;;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC/PA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;AAIA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AAAA;AAKA;;;;AA5EA;AACA;AA8EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnHA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;AAIA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AA5EA;AACA;AA8EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAgBA;;;;;;;;;;;;;;;;;;;;ACxGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AACA;;;;;;AAGA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAEA;;;;;;AAGA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAOA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AADA;AAYA;;;;AA/FA;AACA;AAiGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AAbA;AAgBA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;AC5HA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAAA;AAEA;AACA;AA1DA;AA6DA;AACA;AADA;AAIA;;;;AAGA;AAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAKA;AAAA;AAQA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;AAEA;;;;;AAGA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAAA;AADA;AAMA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAMA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAAA;AADA;AAOA;AAAA;AAGA;AACA;AAAA;AAAA;AADA;AAOA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAIA;AACA;AAAA;AACA;AADA;AAAA;AADA;AAMA;AACA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAAA;AADA;AAOA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAOA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAAA;AADA;AAMA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAOA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAKA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAAA;AADA;AAQA;AACA;AAEA;;;;;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AASA;;;;;;;;;;;;;;;;;;;ACjSA;AACA;AAAA;AACA;AAAA;AACA;;;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAXA;AAcA;;;;;A","sourceRoot":""}