{"version":3,"file":"11.chunk.js","sources":["webpack:///./wechat-react/mine/containers/verification-code/index.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { autobind } from 'core-decorators';\r\nimport Page from 'components/page';\r\nimport { validLegal, locationTo } from 'components/util';\r\nimport { sendValidCode, checkoutCode, userInfo } from '../../actions/camp'\r\n\r\n@autobind\r\nclass LogOutRule extends Component {\r\n    state = {\r\n        // 手机号码\r\n        phoneNumber: '',\r\n        // 是否获取验证码\r\n        getCaptchaFlag: false,\r\n        // 间隔秒数\r\n        secondsCounter: 60,\r\n        //秒数显示\r\n        timer: false,\r\n        // 验证码\r\n        codeNum: {\r\n            code1: '',\r\n            code2: '',\r\n            code3: '',\r\n            code4: '',\r\n            code5: '',\r\n            code6: ''\r\n        },\r\n        messageId:''\r\n    }\r\n    data = {\r\n        // 定时器ID\r\n        intervalTimer: 0,\r\n    }\r\n    componentDidMount =  async () => {\r\n        this.getPhone()\r\n        this.inputRes1.focus()\r\n    }\r\n    //检查手机号码的合法性\r\n    checkPhoneNumber = () => {\r\n        if( this.state.phoneNumber != '' ){\r\n            const phoneNumber = this.state.phoneNumber;\r\n            return validLegal('phoneNum', '手机号码', phoneNumber);\r\n        }else {\r\n            return\r\n        }  \r\n    }\r\n\r\n    //获取用户电话号码\r\n    getPhone = async () => {\r\n        let { user } = await userInfo()\r\n        this.setState({\r\n            phoneNumber: user.mobile || ''\r\n        },() => {\r\n            this.getCaptcha()\r\n        })\r\n    }\r\n    //获取messageId\r\n    getMassageId = (val) => {\r\n        this.setState({\r\n            messageId:val\r\n        })\r\n    }\r\n    //获取短信验证码\r\n    getCaptcha = async () => {\r\n        if (!this.checkPhoneNumber()) {\r\n            return false;\r\n        }\r\n        this.setState({\r\n            getCaptchaFlag: true\r\n        });\r\n        let secondsCounter = this.state.secondsCounter;\r\n        const intervalTimer = this.data.intervalTimer = setInterval(() => {\r\n            if (secondsCounter > 1) {\r\n                let timer = true\r\n                this.setState({\r\n                    secondsCounter: --secondsCounter,\r\n                    timer\r\n                });\r\n            } else {\r\n                let timer = false\r\n                clearInterval(intervalTimer);\r\n                this.setState({\r\n                    getCaptchaFlag: false,\r\n                    secondsCounter: 60,\r\n                    timer\r\n                })\r\n            }\r\n        }, 1000);\r\n        const result = await sendValidCode({ phoneNum: this.state.phoneNumber });\r\n        if (result?.state?.code === 0) {\r\n            this.getMassageId(result.data.messageId)\r\n            this.data.messageId = result.data.messageId;\r\n        } else {\r\n            // 发送短息验证码失败\r\n            window.toast(result?.state?.msg || \"发送短息验证码失败\");\r\n            this.setState({\r\n                getCaptchaFlag: false,\r\n                secondsCounter: 60\r\n            })\r\n        }\r\n    }\r\n    //跳转确认注销页面\r\n    skipToEnterPage = () => {\r\n        locationTo('/wechat/page/mine/enter-logout')\r\n    }\r\n    //限定只能输入一个数字 && 输入后下个输入框自动获取焦点\r\n    examineInput = async (index, captchaRes, e) => {\r\n        let codeNum = captchaRes\r\n        if(e.target.value == '' && index > 1){\r\n            this[`inputRes${index-1}`].focus()\r\n        }\r\n        if(!!codeNum[`code${index}`] && e.target.value == ''){\r\n            codeNum[`code${index}`] = ''\r\n            this.setState({\r\n                codeNum\r\n            })\r\n        }\r\n        //判断是否在0-9之间\r\n        if(/^\\+?(0|[1-9][0-9]*)$/.test(e.target.value) == false){\r\n            codeNum[`code${index}`] = ''\r\n            this.setState({\r\n                codeNum\r\n            })\r\n            return false\r\n        }\r\n        if( index < 6 && codeNum[`code${index}`] == \"\"){\r\n            this[`inputRes${index+1}`].focus()\r\n        } else {\r\n            this[`inputRes${index}`].focus()\r\n        }\r\n        codeNum[`code${index}`] = e.target.value\r\n        this.setState({\r\n            codeNum\r\n        })\r\n        if( codeNum.code1\r\n            && codeNum.code2\r\n            && codeNum.code3\r\n            && codeNum.code4\r\n            && codeNum.code5\r\n            && codeNum.code6\r\n            ) {\r\n            let captcha = codeNum.code1 + codeNum.code2 + codeNum.code3 + codeNum.code4 + codeNum.code5 + codeNum.code6\r\n            let { phoneNumber, messageId } = this.state\r\n            window.loading(true);\r\n            let result = await checkoutCode({phoneNum:phoneNumber,code:captcha,messageId})\r\n            window.loading(false);\r\n            if (result?.state?.code === 0) {\r\n                //跳转到确认注销页面\r\n                this.skipToEnterPage()\r\n            } else {\r\n                this.setState({\r\n                    codeNum: {\r\n                        code1: '',\r\n                        code2: '',\r\n                        code3: '',\r\n                        code4: '',\r\n                        code5: '',\r\n                        code6: ''\r\n                    },\r\n                })\r\n                this[`inputRes${1}`].focus()\r\n                // 验证错误\r\n                window.toast(result?.state?.msg || '验证错误');\r\n            }\r\n        }\r\n    }\r\n    // componentWillUnmount = () => {\r\n    //     // 清除定时器\r\n    //     clearInterval(this.data.intervalTimer);\r\n    // }\r\n\r\n    render() {\r\n        const { secondsCounter, timer, codeNum, phoneNumber } = this.state\r\n        \r\n        return (\r\n            <Page title=\"输入验证码\" className=\"verification-code\">\r\n                <div className=\"verification-code-box\">\r\n                    <div className=\"title\">\r\n                        <p>请输入验证码</p>\r\n                    </div>\r\n                    <div className=\"phone-num\">\r\n                        <p>\r\n                            已发送验证码至 \r\n                            {phoneNumber && <span>{phoneNumber}</span>}\r\n                        </p>\r\n                        <p className={timer ? 'regain-color' : 'regain'} onClick={this.getCaptcha}>\r\n                            重新获取 \r\n                            <span style={timer ? { display: 'block' } : { display: 'none' }}>\r\n                                ({secondsCounter}s)\r\n                            </span>\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"verification-code-input\">\r\n                        <input \r\n                            ref={ele => this.inputRes1 = ele} \r\n                            onChange={this.examineInput.bind(this, 1, codeNum)} \r\n                            value={codeNum.code1}\r\n                            maxLength='1'\r\n                        />\r\n                        <input \r\n                            ref={ele => this.inputRes2 = ele} \r\n                            onChange={this.examineInput.bind(this, 2, codeNum)} \r\n                            value={codeNum.code2}\r\n                            maxLength='1'\r\n                        />\r\n                        <input \r\n                            ref={ele => this.inputRes3 = ele} \r\n                            onChange={this.examineInput.bind(this, 3, codeNum)} \r\n                            value={codeNum.code3}\r\n                            maxLength='1'\r\n                        />\r\n                        <input \r\n                            ref={ele => this.inputRes4 = ele} \r\n                            onChange={this.examineInput.bind(this, 4, codeNum)} \r\n                            value={codeNum.code4}\r\n                            maxLength='1'\r\n                        />\r\n                        <input \r\n                            ref={ele => this.inputRes5 = ele} \r\n                            onChange={this.examineInput.bind(this, 5, codeNum)} \r\n                            value={codeNum.code5}\r\n                            maxLength='1'\r\n                        />\r\n                        <input \r\n                            ref={ele => this.inputRes6 = ele} \r\n                            onChange={this.examineInput.bind(this, 6, codeNum)} \r\n                            value={codeNum.code6}\r\n                            maxLength='1'\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </Page>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = function (state) {\r\n\r\n};\r\n\r\nconst mapActionToProps = {\r\n    sendValidCode\r\n};\r\n\r\nmodule.exports = connect(mapStateToProps, mapActionToProps)(LogOutRule);"],"mappings":";;;;;;;;;;;;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAlBA;AACA;AAmBA;AACA;AACA;AAFA;AACA;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AADA;AAGA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAIA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAxBA;AAAA;AAyBA;AAAA;AACA;AA1BA;AAyBA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AArCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAsCA;AACA;AACA;AACA;;;;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AACA;AAYA;AACA;AAAA;AACA;AADA;AACA;AAfA;AACA;AADA;AAmBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AACA;AA1BA;AAAA;AAAA;AAAA;AACA;AAkCA;AAnCA;AAqCA;AArCA;AAAA;AAsCA;AAAA;AAAA;AAAA;AACA;AAvCA;AAsCA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AACA;AASA;AACA;AACA;AAAA;AACA;AACA;AA1DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AA2DA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAKA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAUA;;;;AAjOA;AACA;AAmOA;AACA;AAGA;AACA;AADA;AAIA;;;;A","sourceRoot":""}